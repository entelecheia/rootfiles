# {{- $chezmoiForce := or (has "--force" .chezmoi.args) (has "--force=true" .chezmoi.args) -}}
# {{- $interactive := and stdinIsATTY (not $chezmoiForce) -}}
# {{- $ubuntu := hasKey .chezmoi.osRelease "ubuntuCodename" -}}
# {{- $wsl := or (env "WSL_DISTRO_NAME") (env "IS_WSL") | not | not -}}
# {{- $devcontainer := or (env "REMOTE_CONTAINERS") (env "CODESPACES") (env "VSCODE_REMOTE_CONTAINERS_SESSION") (env "GITPOD_HOST") | not | not -}}
# {{- $gnome := lookPath "gnome-shell" | not | not -}}
# {{- $cpuCores := 1 -}}
# {{- $cpuThreads := 1 -}}
# {{- if eq .chezmoi.os "darwin" -}}
# {{-   $cpuCores = (output "sysctl" "-n" "hw.physicalcpu_max") | trim | atoi -}}
# {{-   $cpuThreads = (output "sysctl" "-n" "hw.logicalcpu_max") | trim | atoi -}}
# {{- else if eq .chezmoi.os "linux" -}}
# {{-   $cpuCores = (output "sh" "-c" "lscpu --online --parse | grep --invert-match '^#' | sort --field-separator=',' --key='2,4' --unique | wc --lines") | trim | atoi -}}
# {{-   $cpuThreads = (output "sh" "-c" "lscpu --online --parse | grep --invert-match '^#' | wc --lines") | trim | atoi -}}
# {{- else if eq .chezmoi.os "windows" -}}
# {{-   $cpuCores = (output "powershell.exe" "-NoProfile" "-NonInteractive" "-Command" "(Get-CimInstance -ClassName 'Win32_Processor').NumberOfCores") | trim | atoi -}}
# {{-   $cpuThreads = (output "powershell.exe" "-NoProfile" "-NonInteractive" "-Command" "(Get-CimInstance -ClassName 'Win32_Processor').NumberOfLogicalProcessors") | trim | atoi -}}
# {{- end -}}

# {{- $upgrade_packages := false -}}
# {{- if and (hasKey . "system") (hasKey .system "upgrade_packages") -}}
# {{-   $upgrade_packages = .system.upgrade_packages -}}
# {{- else -}}
# {{-   if eq (env "DOTFILES_UPGRADE_PACKAGES") "true" "True" "TRUE" "1" -}}
# {{-     $upgrade_packages = true -}}
# {{-   end -}}
# {{- end -}}

# {{- $verbose := false -}}
# {{- if and (hasKey . "system") (hasKey .system "verbose") -}}
# {{-   $verbose = .system.verbose | not | not -}}
# {{- else -}}
# {{-   if eq (env "DOTFILES_VERBOSE") "true" "True" "TRUE" "1" -}}
# {{-     $verbose = true -}}
# {{-   end -}}
# {{- end -}}

# {{- $hostname := or (env "SYSTEM_HOSTNAME") .chezmoi.hostname -}}
# {{- if and (hasKey . "system") (hasKey .system "hostname") .system.hostname -}}
# {{-   $hostname = .system.hostname -}}
# {{- end -}}

# {{- $non_root_user:= "" -}}
# {{- if and (hasKey . "non_root_user") .non_root_user -}}
# {{-   $non_root_user = .non_root_user -}}
# {{- end -}}


# {{- $dataspace_location := "/raid/" -}}
# {{- $dataspace_name := "data" -}}
# {{- $datapace_root := joinPath $dataspace_location $dataspace_name -}}
# {{- $symlink_dataspace := false -}}
# {{- if and (hasKey . "dataspace") (hasKey .dataspace "symlink_dataspace") -}}
# {{-   $symlink_dataspace = .dataspace.symlink_dataspace -}}
# {{- end -}}
# {{- $docker_image_dir := joinPath .chezmoi.homeDir ".local/share/dockerfiles" -}}

# {{- $use_ngrok := false -}}
# {{- if eq (env "DOTFILES_USE_NGROK") "true" "True" "TRUE" "1" -}}
# {{-   $use_ngrok = true -}}
# {{- end -}}
# {{- $ngrok_authtoken := or (env "NGROK_AUTHTOKEN") "" -}}
# {{- if and (hasKey . "ngrok") (hasKey .ngrok "authtoken") -}}
# {{-   $ngrok_authtoken = .ngrok.authtoken -}}
# {{- end -}}
# {{- $ngrok_ssh_port := or (env "NGROK_SSH_PORT") "22" -}}
# {{- if and (hasKey . "ngrok") (hasKey .ngrok "ssh_port") -}}
# {{-   $ngrok_ssh_port = .ngrok.ssh_port -}}
# {{- end -}}
# {{- $ngrok_config_file := or (env "NGROK_CONFIG") (joinPath .chezmoi.homeDir ".config/ngrok/ngrok.yml") -}}

# {{- $use_cloudflared := false -}}
# {{- if eq (env "DOTFILES_USE_CLOUDFLARED") "true" "True" "TRUE" "1" -}}
# {{-   $use_cloudflared = true -}}
# {{- end -}}
# {{- if and (hasKey . "cloudflared") (hasKey .cloudflared "enabled") -}}
# {{-   $use_cloudflared = .cloudflared.enabled -}}
# {{- end -}}
# {{- $cloudflared_tunnel_uuid := or (env "CLOUDFLARED_TUNNEL_UUID") "" -}}
# {{- if and (hasKey . "cloudflared") (hasKey .cloudflared "tunnel_uuid") -}}
# {{-   $cloudflared_tunnel_uuid = .cloudflared.tunnel_uuid -}}
# {{- end -}}
# {{- $cloudflared_tunnel_name := or (env "CLOUDFLARED_TUNNEL_NAME") "" -}}
# {{- if and (hasKey . "cloudflared") (hasKey .cloudflared "tunnel_name") -}}
# {{-   $cloudflared_tunnel_name = .cloudflared.tunnel_name -}}
# {{- end -}}
# {{- $cloudflared_tunnel_hostname := or (env "CLOUDFLARED_TUNNEL_HOSTNAME") "" -}}
# {{- if and (hasKey . "cloudflared") (hasKey .cloudflared "tunnel_hostname") -}}
# {{-   $cloudflared_tunnel_hostname = .cloudflared.tunnel_hostname -}}
# {{- end -}}
# {{- $cloudflared_config_file := or (env "CLOUDFLARED_CONFIG") (joinPath .chezmoi.homeDir ".cloudflared/config.yml") -}}
# {{- $cloudflared_config_template := (joinPath .chezmoi.homeDir ".cloudflared/config.tmp") -}}
# {{- $cloudflared_credentials_file := "" -}}

# {{- $dotfiles_version := or (env "DOTFILES_VERSION") "N/A" -}}
# {{- writeToStdout "---\n" -}}
# {{- writeToStdout "üñ•Ô∏è  Information found in your system environment variables:\n" -}}
# {{- writeToStdout (printf "üè†  SYSTEM_HOSTNAME: %s\n" $hostname) -}}
# {{- writeToStdout (printf "üî¨  DOTFILES_VERBOSE: %t\n" ($verbose | not | not)) -}}
# {{- writeToStdout "---\n" -}}

# {{- if $interactive -}}
# {{-   $question := "‚ùî Do you want to upgrade packages if needed" -}}
# {{-   $upgrade_packages = promptBool $question $upgrade_packages -}}
# {{- end -}}
# {{- if $upgrade_packages -}}
# {{-   writeToStdout "‚úÖ  Upgrade packages enabled\n" -}}
# {{- else -}}
# {{-   writeToStdout "‚ùé  Upgrade packages disabled\n" -}}
# {{- end -}}

# {{- if $interactive -}}
# {{-   $question := "‚ùî Do you want to enable verbose mode" -}}
# {{-   $verbose = promptBool $question $verbose -}}
# {{- end -}}
# {{- if $verbose -}}
# {{-   writeToStdout "‚úÖ  Verbose mode enabled\n" -}}
# {{- else -}}
# {{-   writeToStdout "‚ùé  Verbose mode disabled\n" -}}
# {{- end -}}

# {{- if $interactive -}}
# {{-   range $i := until 99 -}}
# {{-     $question := "‚ùî What is hostname" -}}
# {{-     $answer := "" -}}
# {{-     if $hostname -}}
# {{-       $answer = promptString $question $hostname -}}
# {{-     else -}}
# {{-       $answer = promptString $question -}}
# {{-     end -}}
# {{-     if regexMatch "^[A-Za-z0-9._-]+$" $answer -}}
# {{-       $hostname = $answer -}}
# {{-       break -}}
# {{-     end -}}
# {{-     writeToStdout (printf "‚ùå '%s' is an invalid hostname\n" $answer) -}}
# {{-     if eq $i 98 -}}
# {{-       writeToStdout "‚ùå ERROR: maximum tries exceeded\n" -}}
# {{-       exit 1 -}}
# {{-     end -}}
# {{-   end -}}
# {{- end -}}
# {{- writeToStdout (printf "‚úÖ  Hostname set as '%s'\n" $hostname) -}}

# {{- if $interactive -}}
# {{-   range $i := until 99 -}}
# {{-     $question := "‚ùî What is non root username" -}}
# {{-     $answer := "" -}}
# {{-     if $non_root_user -}}
# {{-       $answer = promptString $question $non_root_user -}}
# {{-     else -}}
# {{-       $answer = promptString $question -}}
# {{-     end -}}
# {{-     if regexMatch "^[A-Za-z0-9_-]+$" $answer -}}
# {{-       $non_root_user = $answer -}}
# {{-       break -}}
# {{-     end -}}
# {{-     writeToStdout (printf "‚ùå '%s' is an invalid username\n" $answer) -}}
# {{-     if eq $i 98 -}}
# {{-       writeToStdout "‚ùå ERROR: maximum tries exceeded\n" -}}
# {{-       exit 1 -}}
# {{-     end -}}
# {{-   end -}}
# {{- end -}}
# {{- writeToStdout (printf "‚úÖ  Non root username set as '%s'\n" $non_root_user) -}}

# {{- if $interactive -}}
# {{-   $question := "‚ùî Where do you want to put data of the users" -}}
# {{-   $answer := "" -}}
# {{-   if $dataspace_location -}}
# {{-     $answer = promptString $question $dataspace_location -}}
# {{-   else -}}
# {{-     $answer = promptString $question -}}
# {{-   end -}}
# {{-   $dataspace_location = $answer -}}
# {{- end -}}
# {{- writeToStdout (printf "‚úÖ  Data location set as '%s'\n" $dataspace_location) -}}

# {{- $datapace_root = joinPath $dataspace_location $dataspace_name -}}
# {{-   writeToStdout (printf "‚úÖ  Dataspace root set as '%s'\n" $datapace_root) -}}

# {{- if $interactive -}}
# {{-   $question := "‚ùî Do you want to symlink dataspace to the root" -}}
# {{-   $symlink_dataspace = promptBool $question $symlink_dataspace -}}
# {{- end -}}
# {{- if $symlink_dataspace -}}
# {{-   writeToStdout "‚úÖ  Dataspace symlinked to the root\n" -}}
# {{- else -}}
# {{-   writeToStdout "‚ùé  Dataspace not symlinked\n" -}}
# {{- end -}}

# {{- if $use_cloudflared -}}
# {{-   writeToStdout "‚úÖ  cloudflared enabled\n" -}}
# {{- else -}}
# {{-   writeToStdout "‚ùé  cloudflared disabled\n" -}}
# {{- end -}}

# {{- if $use_ngrok -}}
# {{-   writeToStdout "‚úÖ  ngrok enabled\n" -}}
# {{- else -}}
# {{-   writeToStdout "‚ùé  ngrok disabled\n" -}}
# {{- end -}}
# {{- if and $interactive $use_ngrok -}}
# {{-   $question := "‚ùî What is your ngrok authtoken" -}}
# {{-   $answer := "" -}}
# {{-   if $ngrok_authtoken -}}
# {{-     $answer = promptString $question $ngrok_authtoken -}}
# {{-   else -}}
# {{-     $answer = promptString $question -}}
# {{-   end -}}
# {{-   $ngrok_authtoken = $answer -}}
# {{- end -}}
# {{- if $use_ngrok -}}
# {{-   if $ngrok_authtoken -}}
# {{-     writeToStdout "‚úÖ  ngrok authtoken set as '***'\n" -}}
# {{-   else -}}
# {{-     writeToStdout "‚ùé  ngrok authtoken not set\n" -}}
# {{-   end -}}
# {{- end -}}

# {{- if and $interactive $use_ngrok -}}
# {{-   $question := "‚ùî What is your ssh service port for ngrok" -}}
# {{-   $answer := "" -}}
# {{-   if $ngrok_ssh_port -}}
# {{-     $answer = promptString $question $ngrok_ssh_port -}}
# {{-   else -}}
# {{-     $answer = promptString $question -}}
# {{-   end -}}
# {{-   $ngrok_ssh_port = $answer -}}
# {{- end -}}
# {{- if $use_ngrok -}}
# {{-   if $ngrok_ssh_port -}}
# {{-     writeToStdout (printf "‚úÖ  ngrok ssh port set as '%s'\n" $ngrok_ssh_port) -}}
# {{-   else -}}
# {{-     writeToStdout "‚ùé  ngrok ssh port not set\n" -}}
# {{-   end -}}
# {{- end -}}

# {{- $pkgs_user := "" -}}
# {{- if $use_ngrok -}}
# {{-   $pkgs_user = printf "%s ngrok" $pkgs_user -}}
# {{- end -}}
# {{- if $use_cloudflared -}}
# {{-   $pkgs_user = printf "%s cloudflared" $pkgs_user -}}
# {{- end -}}

# {{- if $interactive -}}
# {{-   $question := "‚ùî What are the additional packages to install (input as space separated list, ex: git curl)" -}}
# {{-   $answer := "" -}}
# {{-   if $pkgs_user -}}
# {{-     $answer = promptString $question $pkgs_user -}}
# {{-   else -}}
# {{-     $answer = promptString $question -}}
# {{-   end -}}
# {{-   $pkgs_user = $answer -}}
# {{- end -}}
# {{- $pkgs_user = trim $pkgs_user -}}
# {{- if $pkgs_user -}}
# {{-   writeToStdout (printf "‚úÖ  Additional packages to install set as \n    '%s'\n" $pkgs_user) -}}
# {{- else -}}
# {{-   writeToStdout "‚ùé  Additional packages to install not set\n" -}}
# {{- end -}}

# {{-   writeToStdout "\nüí° Tip: you can always config your dotfiles interactively by running `dotfiles-update|dotu init`.\n" -}}

# {{- /* This retains the value passed with --source on chezmoi init, which is used in the ../install.sh script */ -}} #
sourceDir: "{{ .chezmoi.workingTree }}"

destDir: "/"

verbose: {{ $verbose | not | not }}

diff:
  exclude:
    - always
status:
  exclude:
    - always

# {{- /* Here we "export" the variables, so we can access them outside this file */ -}} #
data:
  non_root_user: {{ $non_root_user }}
  editor: "vi"
  system:
    upgrade_packages: {{ $upgrade_packages }}
    verbose: {{ $verbose }}
    hostname: {{ $hostname | quote }}
    is_wsl: {{ $wsl }}
    is_devcontainer: {{ $devcontainer }}
    is_gnome: {{ $gnome }}
    is_interactive: {{ $interactive }}
    uname_arch: {{ output "uname" "-m" | trim | quote }}
    cpu:
      cores: {{ $cpuCores }}
      threads: {{ $cpuThreads }}
  ngrok:
    enabled: {{ $use_ngrok }}
    authtoken: {{ $ngrok_authtoken | quote }}
    config_file: {{ $ngrok_config_file | quote }}
    ssh_port: {{ $ngrok_ssh_port | quote }}
  cloudflared:
    enabled: {{ $use_cloudflared }}
    config_file: {{ $cloudflared_config_file | quote }}
    config_template: {{ $cloudflared_config_template | quote }}
    tunnel_hostname: {{ $cloudflared_tunnel_hostname | quote }}
    tunnel_name: {{ $cloudflared_tunnel_name | quote }}
    tunnel_uuid: {{ $cloudflared_tunnel_uuid | quote }}
    credentials_file: {{ $cloudflared_credentials_file | quote }}
  install_packages:
    user: {{ $pkgs_user }}
  dataspace:
    name: {{ $dataspace_name | quote }}
    root: {{ $datapace_root | quote }}
    move_existing: true
    symlink_to_home: {{ $symlink_to_home }}
    symlink_dataspace: {{ $symlink_dataspace }}
    docker_image_dir: {{ $docker_image_dir | quote }}
