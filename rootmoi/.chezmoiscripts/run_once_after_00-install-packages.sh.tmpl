#!/bin/bash
# shellcheck source=/dev/null
# {{- template "scripts-library" }}
# {{- template "package-library" }}
log_task "Installing APT packages"

# shellcheck source=/dev/null
export DEBIAN_FRONTEND=noninteractive

obsolete_packages=(
{{- range .packages }}
{{-   if and (hasKey . "apt_remove") (.apt_remove) }}
  {{ .apt_remove }}
{{-   end }}
{{- end }}
)
if [[ "${#obsolete_packages[@]}" -gt 0 ]]; then
  for package in "${obsolete_packages[@]}"; do
    if is_apt_package_installed "${package}"; then
      log_task "Removing obsolete package '${package}'"
      c sudo apt remove --yes -qq -o=Dpkg::Use-Pty=0 "${package}"
    else
      log_info "Package '${package}' is not installed"
    fi
  done
fi

wanted_packages=(
{{- range .packages }}
{{-   if and (hasKey . "apt") (.apt) }}
  {{ .name }}
{{-   end }}
{{- end }}
)
log_info "Wanted packages: ${wanted_packages[*]}"

{{- range .packages }}
PKG_NAME="{{ .name }}"
{{-   if and (hasKey . "repository_script") (.repository_script) }}
REPO_SCRIPT="{{ .repository_script }}"
SOURCE_LIST_FILE="/etc/apt/sources.list.d/{{ .source_list_file }}"
if [[ ! -f "${SOURCE_LIST_FILE}" ]] && is_item_in_array "${PKG_NAME}" "${wanted_packages[@]}"; then
  if [[ $REPO_SCRIPT == http* ]]; then
    log_task "Downloading and running repository script for '${PKG_NAME}'"
    c curl -sLf --retry 3 --tlsv1.2 --proto "=https" "${REPO_SCRIPT}" | bash -
  else
    log_task "Running repository script for '${PKG_NAME}'"
    c "${REPO_SCRIPT}"
  fi
fi
{{-   end }}
{{-   if and (hasKey . "keyring_file") (.keyring_file) }}
KEYRING_FILE="/usr/share/keyrings/{{ .keyring_file }}"
KEYRING_URL="{{ .keyring_url }}"
if [[ ! -f "${KEYRING_FILE}" ]] && is_item_in_array "${PKG_NAME}" "${wanted_packages[@]}"; then
  log_task "Downloading {{ .keyring_file }}"
  c curl -fsSL "${KEYRING_URL}" | gpg --dearmor -o "${KEYRING_FILE}"
  c chmod go+r "${KEYRING_FILE}"
fi
{{-   end }}
{{-   if and (hasKey . "gpg_key_file") (.gpg_key_file) }}
GPG_KEY_FIE="/etc/apt/trusted.gpg.d/{{ .gpg_key_file }}"
GPG_KEY_URL="{{ .gpg_key_url }}"
if [[ ! -f "${GPG_KEY_FIE}" ]] && is_item_in_array "${PKG_NAME}" "${wanted_packages[@]}"; then
  c curl -s "${GPG_KEY_URL}" | tee "${GPG_KEY_FIE}" >/dev/null
fi
{{-   end }}
{{-   if and (hasKey . "apt_key_url") (.apt_key_url) }}
APT_KEY_URL="{{ .apt_key_url }}"
if is_item_in_array "${PKG_NAME}" "${wanted_packages[@]}"; then
  c curl -sLf --retry 3 --tlsv1.2 --proto "=https" "${APT_KEY_URL}" | apt-key add -
fi
{{-   end }}
{{-   if and (hasKey . "source_list_file") (.source_list_file) }}
SOURCE_LIST_FILE="/etc/apt/sources.list.d/{{ .source_list_file }}"
{{-   if and (hasKey . "source_list_line") (.source_list_line) }}
SOURCE_LIST_LINE="{{ .source_list_line }}"
{{-   else }}
SOURCE_LIST_LINE=""
{{-   end }}
{{-   if and (hasKey . "source_list_script") (.source_list_script) }}
SOURCE_LIST_SCRIPT="{{ .source_list_script }}"
{{-   else }}
SOURCE_LIST_SCRIPT=""
{{-   end }}
if [[ ! -f "${SOURCE_LIST_FILE}" ]] && is_item_in_array "${PKG_NAME}" "${wanted_packages[@]}"; then
  if [[ -n "${SOURCE_LIST_SCRIPT}" ]]; then
    log_task "Running {{ .source_list_file }} repository script"
    c "${SOURCE_LIST_SCRIPT}"
  elif [[ -n "${SOURCE_LIST_LINE}" ]]; then
    log_task "Adding {{ .source_list_file }} repository to APT"
    c echo "$SOURCE_LIST_LINE" | tee "$SOURCE_LIST_FILE"
  else
    log_error "No source list line or script provided for {{ .source_list_file }}"
  fi
fi
{{-   end }}
{{- end }}

apt_command=(apt-get)
if [[ ${#missing_packages[@]} -gt 0 ]]; then
  log_task "Installing missing packages with APT: ${missing_packages[*]}"
  c "${apt_command[@]}" install --yes -qq -o=Dpkg::Use-Pty=0 --no-install-recommends "${missing_packages[@]}"
else
  log_info "No missing packages to install with APT"
fi

log_green "âœ…  APT packages installed successfully. âœ¨ ðŸŒŸ âœ¨"
